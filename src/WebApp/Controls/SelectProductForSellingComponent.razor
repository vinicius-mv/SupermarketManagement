@inject IViewCategoriesUseCase ViewCategoriesUseCase
@inject IViewProductsByCategoryIdUseCase ViewProductsByCategoryIdUseCase

<div class="form-group">
    <label for="category">Category</label>
    <select id="category" @bind="SelectedCategoryId" class="form-control">
        <option selected></option>
        @foreach (var cat in categories)
        {
            <option value="@cat.CategoryId">@cat.Name</option>
        }
    </select>
</div>

@if (productsInCategory != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Prod Name</th>
                <th>Qty</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var prod in productsInCategory)
            {
                <tr @onclick="(() => OnSelectProduct(prod))" 
                    style=@(prod.ProductId == selectedProductId?"background-color:beige; cursor:pointer;":"cursor:pointer")>
                    <td>@prod.Name</td>
                    <td>@prod.Quantity</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    [Parameter]
    public EventCallback<Product> OnProductSelected { get; set; }

    private int selectedProductId;

    private int selectedCategoryId;
    public int SelectedCategoryId
    {
        get { return selectedCategoryId; }
        set
        {
            selectedCategoryId = value;
            OnSelectProduct(null);
            LoadCategories();
        }
    }

    private IEnumerable<Category> categories;

    private IEnumerable<Product> productsInCategory;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        this.categories = ViewCategoriesUseCase.Execute();
    }

    private void LoadCategories()
    {
        this.productsInCategory = ViewProductsByCategoryIdUseCase.Execute(selectedCategoryId);
    }

    private void OnSelectProduct(Product product)
    {
        if(product != null)
            this.selectedProductId = product.ProductId;

        OnProductSelected.InvokeAsync(product);

    }
}

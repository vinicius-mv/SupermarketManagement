@page "/products"

@inject NavigationManager NavigationManager
@inject IViewProductsUseCase ViewProductsUseCase
@inject IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject IDeleteProductUseCase DeleteProductUseCase
@inject IAuthorizationService AuthorizationService

<h3>Products</h3>

@if (products != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Category</th>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@GetCategoryByIdUseCase.Execute(product.CategoryId.GetValueOrDefault())?.Name</td>
                    <td>@product.Name</td>
                    <td>@Math.Round(product.Price.GetValueOrDefault(), 2).ToString("F2")</td>
                    <td>@product.Quantity</td>
                    <td><button type="button" class="btn btn-link" @onclick="(() => OnEditProduct(product))">Edit</button></td>
                    <td class="@(isAdmin?"":"d-none")"><button type="button" class="btn btn-link ml-2" @onclick="(() => OnDeleteProduct(product.ProductId))">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}
<br />
<button type="button" @onclick="OnAddProduct" class="btn btn-primary">Add Product</button>


@code {
    private IEnumerable<Product>? products;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        var authState = await authenticationStateTask;
        products = ViewProductsUseCase.Execute();
        isAdmin = await IsAdminUser(authState);
    }

    private void OnAddProduct()
    {
        NavigationManager.NavigateTo("/addproduct");
    }

    private void OnEditProduct(Product product)
    {
        NavigationManager.NavigateTo($"/editproduct/{product.ProductId}");
    }

    private void OnDeleteProduct(int productId)
    {
        if (!isAdmin) return;

        DeleteProductUseCase.Execute(productId);
        products = ViewProductsUseCase.Execute();
    }

    private async Task<bool> IsAdminUser(AuthenticationState authState) => (await AuthorizationService.AuthorizeAsync(authState.User, "AdminOnly")).Succeeded;
}

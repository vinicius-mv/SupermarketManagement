@page "/cashier_console"
@attribute [Authorize(Policy = "CashierOnly")]

@if (!string.IsNullOrWhiteSpace(cashierName))
{
    <div class="row">
        <div class="col-7">
            <h3>Cashier's Console</h3>
        </div>
        <div class="col-2">
            <label for="cashier">Cashier Name:</label>
        </div>
        <div class="col-3">
            <div class="form-group">
                <input type="text" id="cashier" class="form-control" @bind-value="cashierName" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-4">
            <SelectProductForSellingComponent OnProductSelected="SelectProduct"></SelectProductForSellingComponent>
            <br />
            <SellProductComponent CashierName="@cashierName"
                              SelectedProduct="selectedProduct"
                              OnProductSold="SellProduct">
            </SellProductComponent>
        </div>
        <div class="col">
            <DailyTransactionsComponent @ref="transactionComponent"></DailyTransactionsComponent>
        </div>
    </div>
}

@code {
    private DailyTransactionsComponent transactionComponent;

    private Product selectedProduct;
    private string cashierName;

    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }
    private AuthenticationState authState;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        authState = await _authState;
        cashierName = authState.User.Identity.Name;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            return Task.CompletedTask;
        }
        transactionComponent.LoadTransaction(cashierName);
    }

    private void SelectProduct(Product product)
    {
        this.selectedProduct = product;
    }

    private void SellProduct(Product product)
    {
        transactionComponent.LoadTransaction(cashierName);
    }
}

@page "/categories"

@inject NavigationManager NavigationManager
@inject IAuthorizationService AuthorizationService
@inject UseCases.IViewCategoriesUseCase ViewCategoriesUseCases
@inject UseCases.IDeleteCategoryUseCase DeleteCategoryUseCase

<h3>Manage Categories</h3>

@if (categories != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>@category.Name</td>
                    <td>@category.Description</td>
                    <td><button type="button" @onclick="@(() => EditCategory(category))" class="btn btn-link">Edit</button></td>
                    <td class="@(isAdmin?"":"d-none")"><button type="button" @onclick="@(() => DeleteCategory(category.CategoryId))" class="btn btn-link">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

<br />
<button type="button" @onclick="AddCategory" class="btn btn-primary">Add Category</button>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private IEnumerable<Category> categories;

    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        var authState = await authenticationStateTask;
        isAdmin = await IsAdminUser(authState);
        LoadCategories();
    }

    private void AddCategory()
    {
        NavigationManager.NavigateTo("/addcategory");
    }

    private void EditCategory(Category category)
    {
        NavigationManager.NavigateTo($"/editcategory/{category.CategoryId}");
    }

    private void DeleteCategory(int categoryId)
    {
        if (!isAdmin) return;

        DeleteCategoryUseCase.DeleteCategory(categoryId);
        LoadCategories();
    }

    private void LoadCategories()
    {
        this.categories = ViewCategoriesUseCases.Execute()?.ToList();
    }

    private async Task<bool> IsAdminUser(AuthenticationState authState) => (await AuthorizationService.AuthorizeAsync(authState.User, "AdminOnly")).Succeeded;
}
